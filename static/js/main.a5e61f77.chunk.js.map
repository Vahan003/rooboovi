{"version":3,"sources":["reducers/rooms.reducer.js","reducers/booking.reducer.js","reducers/visitors.reducer.js","reducers/index.js","store/store.js","API/index.js","actions/rooms.actions.js","actions/booking.actions.js","actions/visitors.actions.js","thunks/rooms.thunk.js","thunks/visitors.thunk.js","screens/Rooms/Rooms.jsx","screens/Booking/Booking.jsx","thunks/booking.thunk.js","screens/Visitors/Visitors.jsx","components/Page404.js","components/Navigation.jsx","App.js","index.js"],"names":["initialState","gettingStatus","getRoomsStatus","postRoomStatus","postRoom","rooms","status","booking","visitors","getBookingStatus","postBookingStatus","postBooking","getVisitorsStatus","postVisitorsStatus","postVisitors","combineReducers","state","action","type","payload","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","axiosInstance","axios","create","baseURL","responseType","Endpoint","EndpointFactory","roomsStatus","bookings","putRoom","id","putBooking","putVisitors","postRoomSuccsess","data","postBookingSuccsess","postVisitorsSuccsess","getRoomsThunk","dispatch","a","async","api","get","response","Error","putRoomThunk","put","getVisitorsThunk","Rooms","props","checkEmtyInputs","poster","floor","beds","balcony","roomId","setState","checked","emtyInputs","onEdit","elem","updating","ID","onDelete","deleteRoom","onCreate","createRoom","onUpdate","updateRoom","setTimeout","getInp","e","target","name","value","bookedAt","Date","available","this","getStatus","getRooms","PrevProps","console","log","className","onChange","defaultValue","disabled","hidden","onClick","map","ind","d","parse","key","getDate","getMonth","getFullYear","PureComponent","connect","post","postRoomThunk","delete","deleteRoomThunk","Booking","personName","personId","roomNumber","updateRoomBookingDate","roomPoster","filter","chPersonID","split","chRoomID","createBooking","deleteBooking","updateBooking","person","room","i","options","length","text","selectedIndex","getBooking","getVisitors","readOnly","document","getElementById","Component","postBookingThunk","putBookingThunk","deleteBookingThunk","Visitors","cardNumber","createdDate","deleteVisitors","createVisitors","updateVisitors","postVisitorsThunk","putVisitorsThunk","deleteVisitorsThunk","Page404","location","pathname","Navigation","to","path","exact","component","App","ReactDOM","render"],"mappings":"qTAAMA,EAAe,CACjBC,eAAgB,EAChBC,gBAAgB,EAChBC,gBAAe,EACfC,SAAU,GACVC,MAAO,GACPC,OAAgB,CACdD,MAAO,EACPE,QAAS,EACTC,SAAU,ICThB,IAAMR,EAAe,CACjBS,kBAAkB,EAClBC,mBAAmB,EACnBC,YAAa,GACbJ,QAAS,ICJb,IAAMP,EAAe,CACjBY,mBAAmB,EACnBC,oBAAoB,EACpBC,aAAc,GACdN,SAAU,ICECO,kBAAgB,CAC3BV,MHMa,WAAqD,IAA/BW,EAA8B,uDAAtBhB,EAAciB,EAAQ,uCACjE,OAAOA,EAAOC,MAEZ,IAAK,qBACH,OAAO,eACFF,EADL,CAEEf,eAAe,IAEnB,IAAK,sBACL,OAAO,eACFe,EADL,CAEEf,eAAe,EACfK,OAAQW,EAAOE,UAEjB,IAAK,qBACL,OAAO,eACFH,EADL,CAEEf,eAAe,IAEjB,IAAK,qBACL,OAAO,eACFe,EADL,CAEEd,gBAAgB,EAChBG,MAAOY,EAAOE,UAEhB,IAAK,oBACL,OAAO,eACFH,EADL,CAEEd,gBAAgB,IAElB,IAAK,qBACL,OAAO,eACFc,EADL,CAEEb,gBAAgB,EAChBC,SAAUa,EAAOE,UAEnB,IAAK,oBACL,OAAO,eACFH,EADL,CAEEb,gBAAgB,IAElB,QACE,OAAOa,IG/CXT,QFDa,WAAuD,IAA/BS,EAA8B,uDAAtBhB,EAAciB,EAAQ,uCACnE,OAAOA,EAAOC,MACZ,IAAK,uBACL,OAAO,eACFF,EADL,CAEEP,kBAAkB,EAClBF,QAASU,EAAOE,UAElB,IAAK,sBACL,OAAO,eACFH,EADL,CAEEP,kBAAkB,IAEpB,IAAK,wBACL,OAAO,eACFO,EADL,CAEEN,mBAAmB,EACnBC,YAAaM,EAAOE,UAEtB,IAAK,uBACL,OAAO,eACFH,EADL,CAEEN,mBAAmB,IAErB,QACE,OAAOM,IEvBXR,SDFa,WAAwD,IAA/BQ,EAA8B,uDAAtBhB,EAAciB,EAAQ,uCACpE,OAAOA,EAAOC,MACZ,IAAK,wBACL,OAAO,eACFF,EADL,CAEEJ,mBAAmB,EACnBJ,SAAUS,EAAOE,UAEnB,IAAK,uBACL,OAAO,eACFH,EADL,CAEEJ,mBAAmB,IAErB,IAAK,yBACH,OAAO,eACFI,EADL,CAEEH,oBAAoB,EACpBC,aAAcG,EAAOE,UAEvB,IAAK,wBACL,OAAO,eACFH,EADL,CAEEH,oBAAoB,IAEtB,QACA,OAAOG,ME5BTI,EAAa,C,MAACC,GAQLC,EALDC,YACZC,EACAC,YAAQC,IAAe,WAAf,EAAmBN,K,iGCNvBO,EAAgBC,IAAMC,OAAO,CACjCC,QAAS,2CACTC,aAAc,SAGVC,EAAWC,YAAgBN,GAElB,GACbtB,MAAc,IAAI2B,EAAS,SAC3BE,YAAc,IAAIF,EAAS,gBAC3BG,SAAc,IAAIH,EAAS,gBAC3BxB,SAAc,IAAIwB,EAAS,YAC3BI,QAAa,SAACC,GAAD,OAAO,IAAIL,EAAS,SAAUK,IAC3CC,WAAgB,SAACD,GAAD,OAAO,IAAIL,EAAS,gBAAkBK,IACtDE,YAAc,SAACF,GAAD,OAAO,IAAIL,EAAS,YAAcK,KCKrCG,EAAmB,SAACC,GAAD,MAAW,CACzCvB,KAAM,qBACNC,QAASsB,IChBIC,EAAsB,SAACD,GAAD,MAAW,CAC5CvB,KAAM,wBACNC,QAASsB,ICDEE,EAAuB,SAACF,GAAD,MAAW,CAC7CvB,KAAM,yBACNC,QAASsB,ICKAG,EAAgB,kBAAM,SAAOC,GAAP,eAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAGRE,EAAI3C,MAAM4C,OAHF,UAIP,OADlBC,EAHyB,QAIlB5C,OAJkB,sBAKvB,IAAI6C,MAAM,oBALa,OAO/BN,EHVuC,CACzC3B,KAAM,qBACNC,QGQ4B+B,EAAST,OAPJ,gDAS/BI,EHPkC,CACpC3B,KAAM,sBGH2B,0DAyBtBkC,EAAe,SAACX,EAAKJ,GAAN,OAAa,SAAOQ,GAAP,eAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAGdE,EAAIZ,QAAQC,GAAIgB,IAAIZ,IAHN,UAKb,OAFlBS,EAH+B,QAKxB5C,OALwB,sBAM7B,IAAI6C,MAAM,oBANmB,OAQrCN,EAASL,EAAiBU,IARW,gDAUrCL,EHxBkC,CACpC3B,KAAM,sBGaiC,0DCtC5BoC,EAAmB,kBAAM,SAAOT,GAAP,eAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAGTE,EAAIxC,SAASyC,OAHJ,UAIR,OADlBC,EAH0B,QAInB5C,OAJmB,sBAKxB,IAAI6C,MAAM,oBALc,OAOhCN,EFVwC,CAC1C3B,KAAM,wBACNC,QEQ+B+B,EAAST,OAPN,gDAShCI,EFPqC,CACvC3B,KAAM,yBEH4B,0DCOhCqC,G,kBACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KA2BRC,gBAAkB,WAChB,MAC8B,KAA5B,EAAKzC,MAAM0C,OAAOC,OACS,KAA3B,EAAK3C,MAAM0C,OAAOE,MACY,KAA9B,EAAK5C,MAAM0C,OAAOG,SACW,KAA7B,EAAK7C,MAAM0C,OAAOI,QAElB,EAAKC,SAAS,CACbC,SAAS,KAEH,IAGP,EAAKD,SAAS,CACZC,SAAS,KAEJ,IA5CQ,EA+CnBC,WAAa,WACX,EAAKF,SAAS,CACZL,OAAO,eACF,EAAK1C,MAAM0C,OADV,CAEJC,MAAO,GACPC,KAAM,GACNC,QAAS,GACTC,OAAQ,QAtDK,EA0DnBI,OAAS,SAAAC,GACP,EAAKJ,SAAS,CACZK,UAAU,EACVC,GAAIF,EAAK9B,GACTqB,OAAO,eACF,EAAK1C,MAAM0C,OADV,CAEJC,MAAOQ,EAAKR,MACZC,KAAMO,EAAKP,KACXC,QAASM,EAAKN,QACdC,OAAQK,EAAKL,YAnEA,EAuEnBQ,SAAW,SAAAH,GACT,EAAKX,MAAMe,WAAWJ,EAAK9B,KAxEV,EA2EnBmC,SAAW,WACL,EAAKf,mBACP,EAAKD,MAAMiB,WAAW,EAAKzD,MAAM0C,SA7ElB,EAgFnBgB,SAAW,WACL,EAAKjB,mBACT,EAAKD,MAAMmB,WAAW,EAAK3D,MAAM0C,OAAQ,EAAK1C,MAAMqD,IAChDO,YAAW,WAEP,EAAKpB,MAAMnD,MAAMF,gBACnB,EAAK8D,aAEP,EAAKF,SAAS,CACZK,UAAU,KAIZ,EAAKL,SAAS,CACZK,UAAU,MAGd,MAGA,EAAKL,SAAS,CACZK,UAAU,KArGG,EA0GnBS,OAAS,SAAAC,GACP,EAAKf,SAAS,CACZL,OAAO,eACF,EAAK1C,MAAM0C,OADV,eAEHoB,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,WA5G9B,EAAKjE,MAAQ,CACXgD,SAAS,EACTI,UAAU,EACVC,GAAI,GACJX,OAAQ,CACNwB,SAAU,IAAIC,KACdxB,MAAO,GACPC,KAAM,GACNC,QAAS,GACTC,OAAQ,GACRsB,WAAW,IAZE,E,iFAiBjBC,KAAK7B,MAAM8B,YACXD,KAAK7B,MAAM+B,a,yCAEMC,GACdH,KAAK7B,MAAMnD,MAAMD,WAAaoF,EAAUnF,MAAMD,WACjDqF,QAAQC,IAAI,aAAaL,KAAK7B,OAC9B6B,KAAK7B,MAAM+B,WACXF,KAAK7B,MAAM8B,e,+BA2FH,IAAD,OACP,OACE,yBAAKK,UAAU,SACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,UACZN,KAAK7B,MAAMnD,MAAMC,OAAOD,MACrBgF,KAAK7B,MAAMnD,MAAMC,OAAOD,MACxB,IACJ,yBAAKsF,UAAU,cAAf,UAEF,yBAAKA,UAAU,UACZN,KAAK7B,MAAMnD,MAAMC,OAAOC,QACrB8E,KAAK7B,MAAMnD,MAAMC,OAAOC,QACxB,IACJ,yBAAKoF,UAAU,cAAf,YAEF,yBAAKA,UAAU,UACZN,KAAK7B,MAAMnD,MAAMC,OAAOE,SACrB6E,KAAK7B,MAAMnD,MAAMC,OAAOE,SACxB,IACJ,yBAAKmF,UAAU,cAAf,cAGJ,yBAAKA,UAAU,cACb,yBAAKA,UAAU,cAAf,eAEE,yBAAKA,UAAU,OAAf,QAEE,2BACEX,KAAK,QACLY,SAAUP,KAAKR,OACfc,UAAWN,KAAKrE,MAAMgD,SAAWqB,KAAK7B,MAAMnD,MAAMF,eAAmBkF,KAAKrE,MAAMoD,SAAU,cAAe,GAAM,YAC/Ga,MAAOI,KAAKrE,MAAM0C,OAAOC,SAG7B,yBAAKgC,UAAU,OAAf,OAEE,2BACEX,KAAK,OACLY,SAAUP,KAAKR,OACfc,UAAWN,KAAKrE,MAAMgD,SAAUqB,KAAK7B,MAAMnD,MAAMF,eAAkBkF,KAAKrE,MAAMoD,SAAU,cAAe,GAAM,YAC7Ga,MAAOI,KAAKrE,MAAM0C,OAAOE,QAG7B,yBAAK+B,UAAU,OAAf,UAEE,4BACEX,KAAK,UAELY,SAAUP,KAAKR,OACfc,UAAWN,KAAKrE,MAAMgD,SAAUqB,KAAK7B,MAAMnD,MAAMF,eAAkBkF,KAAKrE,MAAMoD,SAAU,cAAe,GAAM,YAC7Ga,MAAOI,KAAKrE,MAAM0C,OAAOG,SAE3B,4BAAQoB,MAAM,GAAGY,cAAY,EAACC,UAAQ,EAACC,QAAM,GAA7C,UACE,4BAAQd,OAAO,GAAf,OACA,4BAAQA,OAAO,GAAf,QAGJ,yBAAKU,UAAU,OAAf,cAEE,2BACEX,KAAK,SACLY,SAAUP,KAAKR,OACfc,UAAWN,KAAKrE,MAAMgD,SAAUqB,KAAK7B,MAAMnD,MAAMF,eAAkBkF,KAAKrE,MAAMoD,SAAU,cAAe,GAAM,YAC7Ga,MAAOI,KAAKrE,MAAM0C,OAAOI,UAG5BuB,KAAKrE,MAAMoD,SACV,4BAAQ4B,QAASX,KAAKX,UAAtB,UAEA,4BAAQsB,QAASX,KAAKb,UAAtB,aAKR,yBAAKmB,UAAU,kBACb,+BACE,2BAAOA,UAAU,UACf,wBAAIA,UAAU,OACZ,mCACA,yCACA,qCACA,oCACA,uCACA,sCACA,oCACA,wCAGJ,2BAAOA,UAAU,UACdN,KAAK7B,MAAMnD,MAAMA,MAAM4F,KAAI,SAACnB,EAAGoB,GAC9B,IAAMC,EAAI,IAAIhB,KAAKA,KAAKiB,MAAMtB,EAAEI,WAChC,OACE,wBAAImB,IAAKvB,EAAEzC,GAAIsD,UAAU,OACvB,4BAAKO,EAAM,GACX,sCAAQC,EAAEG,UAAV,YAAuBH,EAAEI,WAAW,EAApC,YAAyCJ,EAAEK,gBAC3C,wBAAIb,UAAWb,EAAEnB,MAAQ,EAAI,GAAK,SAAUmB,EAAEnB,OAC9C,wBAAIgC,UAAWb,EAAElB,KAAO,EAAI,GAAK,SAAUkB,EAAElB,MAC7C,wBAAI+B,UAAWb,EAAEjB,QAAU,UAAY,SACpCiB,EAAEjB,QAAU,MAAQ,KAAM,KAE7B,wBAAI8B,UAAWb,EAAEhB,OAAS,EAAI,GAAK,SAAUgB,EAAEhB,QAC/C,wBAAI6B,UAAU,OAAOK,QAAS,kBAAM,EAAK9B,OAAOY,MAChD,wBACEa,UAAW,EAAK3E,MAAMoD,SAAU,iBAAmB,SACnD4B,QAAU,EAAKhF,MAAMoD,SAAoC,aAAzB,kBAAM,EAAKE,SAASQ,kB,GA9NtD2B,kBAsQLC,eA3BS,SAAA1F,GAEtB,MAAO,CACLX,MAFgBW,EAAVX,UAMiB,SAAAwC,GACzB,MAAO,CACLyC,UAAW,WACTzC,GF5P8B,SAAOA,GAAP,eAAAC,EAAAC,OAAA,gEAEhCF,EHLmC,CACrC3B,KAAM,uBGE4B,WAAA4B,EAAA,MAGTE,EAAId,YAAYe,OAHP,UAIR,OADlBC,EAH0B,QAInB5C,OAJmB,sBAKxB,IAAI6C,MAAM,qBALc,OAOhCN,EHNwC,CAC1C3B,KAAM,sBACNC,QGI6B+B,EAAST,KAAKnC,SAPT,kDAShCuC,EHHmC,CACrC3B,KAAM,uBGP4B,6DE8PhCqE,SAAU,WACR1C,EAASD,MAEX6B,WAAY,SAAAhC,GACVI,EFxOuB,SAACJ,GAAD,OAAU,SAAOI,GAAP,eAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAGZE,EAAI3C,MAAMsG,KAAKlE,IAHH,UAIX,OADlBS,EAH6B,QAItB5C,OAJsB,sBAK3B,IAAI6C,MAAM,oBALiB,OAOnCN,EAASL,EAAiBU,IAPS,gDASnCL,EHXkC,CACpC3B,KAAM,sBGC+B,yDEwOxB0F,CAAcnE,KAEzBkC,WAAY,SAAClC,EAAMJ,GACjBQ,EAASO,EAAaX,EAAMJ,KAE9BkC,WAAY,SAAAlC,GACVQ,EFpNyB,SAACR,GAAD,OAAQ,SAAOQ,GAAP,eAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAGZE,EAAIZ,QAAQC,GAAIwE,UAHJ,UAKX,OAFlB3D,EAH6B,QAKtB5C,OALsB,sBAM3B,IAAI6C,MAAM,oBANiB,OAQnCN,EAASL,EAAiBU,IARS,gDAWnCL,EHvCkC,CACpC3B,KAAM,sBG2B+B,yDEoNxB4F,CAAgBzE,QAKhBqE,CAA6CnD,GCpQtDwD,G,kBACJ,WAAYvD,GAAQ,IAAD,8BACjB,4CAAMA,KAcRC,gBAAkB,WAChB,MACmC,KAAjC,EAAKzC,MAAM0C,OAAOsD,YACa,KAA/B,EAAKhG,MAAM0C,OAAOuD,UACe,KAAjC,EAAKjG,MAAM0C,OAAOwD,YACa,KAA/B,EAAKlG,MAAM0C,OAAOwB,UAElB,EAAKnB,SAAS,CACZC,SAAS,KAEJ,IAEP,EAAKD,SAAS,CACZC,SAAS,KAEJ,IA9BQ,EAiCnBC,WAAa,WACX,EAAKF,SAAS,CACZL,OAAO,eACF,EAAK1C,MAAM0C,OADV,CAEJsD,WAAY,GACZE,WAAY,GACZpD,OAAQ,GACRmD,SAAU,GACV/B,SAAU,QAzCG,EA4DnBL,OAAS,SAAAC,GACP,EAAKf,SAAS,CACZL,OAAO,eACF,EAAK1C,MAAM0C,OADV,eAEHoB,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,WAhEb,EAoEnBkC,sBAAwB,SAAA9E,GACtB,IAAI+E,EAAa,GACjB,EAAK5D,MAAMnD,MAAMA,MAAMgH,QAAO,SAAAvC,GAC5B,GAAIA,EAAEzC,KAAOA,EAGX,OAFA+E,EAAatC,GACFI,SAAW,EAAKlE,MAAM0C,OAAOwB,UACjC,KAGX,EAAK1B,MAAMmB,WAAWyC,EAAY/E,IA7EjB,EA+EnBiF,WAAa,SAAAxC,GACX,IAAMG,EAAQH,EAAEC,OAAOE,MAAMsC,MAAM,KACnC,EAAKxD,SAAS,CACZL,OAAO,eACF,EAAK1C,MAAM0C,OADV,CAEJsD,WAAY/B,EAAM,GAClBgC,SAAUhC,EAAM,QArFH,EAyFnBuC,SAAW,SAAA1C,GACT,IAAMG,EAAQH,EAAEC,OAAOE,MAAMsC,MAAM,KACnC,EAAKxD,SAAS,CACZL,OAAO,eACF,EAAK1C,MAAM0C,OADV,CAEJwD,WAAYjC,EAAM,GAClBnB,OAAQmB,EAAM,QA/FD,EAmGnBT,SAAW,WACL,EAAKf,oBACP,EAAKD,MAAMiE,cAAc,EAAKzG,MAAM0C,QACpC,EAAKyD,sBAAsB,EAAKnG,MAAM0C,OAAOI,UAtG9B,EAyGnBQ,SAAW,SAAAH,GACT,EAAKX,MAAMkE,cAAcvD,EAAK9B,KA1Gb,EA4GnBqC,SAAW,WACL,EAAKjB,mBACP,EAAKD,MAAMmE,cAAc,EAAK3G,MAAM0C,OAAQ,EAAK1C,MAAMqD,IACvD,EAAK8C,sBAAsB,EAAKnG,MAAM0C,OAAOI,QACzC,EAAKN,MAAMnD,MAAMF,eACnB,EAAK4D,SAAS,CACZK,UAAU,IAGZ,EAAKL,SAAS,CACZK,UAAU,KAId,EAAKL,SAAS,CACZK,UAAU,KA3HG,EA+HnBF,OAAS,SAACC,EAAMyD,EAAQC,GACtB,EAAK9D,SAAS,CACZK,UAAU,EACVC,GAAIF,EAAK9B,GACTqB,OAAO,eACF,EAAK1C,MAAM0C,OADV,CAEJsD,WAAY7C,EAAK6C,WACjBlD,OAAQK,EAAKL,OACboD,WAAY/C,EAAK+C,WACjBD,SAAU9C,EAAK8C,SACf/B,SAAUf,EAAKe,aAInB,IAAI,IAAI4C,EAAE,EAAEA,EAAEF,EAAOG,QAAQC,OAAOF,IAC/BF,EAAOG,QAAQD,GAAGG,OAAS9D,EAAK6C,aACnCY,EAAOG,QAAQG,cAAgBJ,GAGjC,IAAI,IAAIA,EAAE,EAAEA,EAAED,EAAKE,QAAQC,OAAOF,IAC7BD,EAAKE,QAAQD,GAAGG,OAAhB,UAA4B9D,EAAK+C,cAClCW,EAAKE,QAAQG,cAAgBJ,IAlJjC,EAAK9G,MAAQ,CACXgD,SAAS,EACTI,UAAU,EACVC,GAAI,GACJX,OAAQ,CACNsD,WAAY,GACZE,WAAY,GACZpD,OAAQ,GACRmD,SAAU,GACV/B,SAAU,KAXG,E,iFA8CjBG,KAAK7B,MAAM2E,aACX9C,KAAK7B,MAAM4E,cACX/C,KAAK7B,MAAM+B,a,yCAIMC,GACbH,KAAK7B,MAAMjD,QAAQI,cAAgB6E,EAAUjF,QAAQI,cACvD8E,QAAQC,IAAI,aAAcL,KAAK7B,OAC/B6B,KAAK7B,MAAM2E,aACX9C,KAAK7B,MAAM4E,cACX/C,KAAK7B,MAAM+B,c,+BAgGL,IAAD,OACP,OACE,yBAAKI,UAAU,WACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,cAAf,cAEE,yBAAKA,UAAU,OAAf,cAEE,4BAAQtD,GAAK,SACX2C,KAAK,aACLY,SAAUP,KAAKiC,WACf3B,UACEN,KAAKrE,MAAMgD,SAAWqB,KAAK7B,MAAMjD,QAAQG,kBACrC2E,KAAKrE,MAAMoD,SACT,cACA,GACF,aAGN,4BAAQa,MAAM,GAAGc,QAAM,GAAvB,UAGCV,KAAK7B,MAAMhD,SAASA,SAASyF,KAAI,SAAAnB,GAAC,OACjC,4BAAQuB,IAAKvB,EAAEzC,GAAI4C,MAAO,CAACH,EAAEkC,WAAYlC,EAAEmC,WACxCnC,EAAEkC,iBAKX,yBAAKrB,UAAU,OAAf,YAEE,2BACEX,KAAK,WACLqD,UAAQ,EACR1C,UACEN,KAAKrE,MAAMgD,SAAWqB,KAAK7B,MAAMjD,QAAQG,kBACrC2E,KAAKrE,MAAMoD,SACT,cACA,GACF,YAENa,MAAOI,KAAKrE,MAAM0C,OAAOuD,YAG7B,yBAAKtB,UAAU,OAAf,UAEE,4BAAQtD,GAAK,OACX2C,KAAK,SACLY,SAAUP,KAAKmC,SACf7B,UACEN,KAAKrE,MAAMgD,SAAWqB,KAAK7B,MAAMjD,QAAQG,kBACrC2E,KAAKrE,MAAMoD,SACT,cACA,GACF,aAGN,4BAAQa,MAAM,GAAGc,QAAM,GAAvB,UAGCV,KAAK7B,MAAMnD,MAAMA,MAAM4F,KAAI,SAAAnB,GAAC,OAC3B,4BAAQuB,IAAKvB,EAAEzC,GAAI4C,MAAO,CAACH,EAAEhB,OAAQgB,EAAEzC,KACpCyC,EAAEhB,aAKX,yBAAK6B,UAAU,OAAf,OAEE,2BACEzE,KAAK,OACL8D,KAAK,WACLY,SAAUP,KAAKR,OACfc,UACEN,KAAKrE,MAAMgD,SAAWqB,KAAK7B,MAAMjD,QAAQG,kBACrC2E,KAAKrE,MAAMoD,SACT,cACA,GACF,YAENa,MAAOI,KAAKrE,MAAM0C,OAAOwB,YAG5BG,KAAKrE,MAAMoD,SACV,4BAAQ4B,QAASX,KAAKX,UAAtB,UAEA,4BAAQsB,QAASX,KAAKb,UAAtB,aAKR,yBAAKmB,UAAU,oBACb,+BACE,2BAAOA,UAAU,UACf,wBAAIA,UAAU,OACZ,mCACA,2CACA,uCACA,yCACA,yCACA,oCACA,wCAGJ,2BAAOA,UAAU,UACdN,KAAK7B,MAAMjD,QAAQA,QAAQ0F,KAAI,SAACnB,EAAGoB,GAClC,IAAMC,EAAI,IAAIhB,KAAKA,KAAKiB,MAAMtB,EAAEI,WAChC,OACE,wBAAImB,IAAKvB,EAAEzC,GAAIsD,UAAU,OACvB,4BAAKO,EAAM,GACX,4BAAKpB,EAAEkC,YACP,4BAAKlC,EAAEoC,YACP,sCAAQf,EAAEG,UAAV,YAAuBH,EAAEI,WAAa,EAAtC,YAA2CJ,EAAEK,gBAC7C,4BAAK1B,EAAEmC,UACP,wBAAItB,UAAU,OAAOK,QAAS,kBAAM,EAAK9B,OAAOY,EAAGwD,SAASC,eAAe,UAAUD,SAASC,eAAe,YAC7G,wBACE5C,UACE,EAAK3E,MAAMoD,SAAW,iBAAmB,SAE3C4B,QACG,EAAKhF,MAAMoD,SAAoC,aAAzB,kBAAM,EAAKE,SAASQ,kB,GAnR7C0D,cAoUP9B,eAnCS,SAAA1F,GAEtB,MAAO,CACLT,QAFmCS,EAA7BT,QAGNF,MAHmCW,EAApBX,MAIfG,SAJmCQ,EAAbR,aAQC,SAAAqC,GACzB,MAAO,CACLsF,WAAY,WACVtF,GCtT+B,SAAOA,GAAP,eAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAGRE,EAAIb,SAASc,OAHL,UAIP,OADlBC,EAHyB,QAIlB5C,OAJkB,sBAKvB,IAAI6C,MAAM,oBALa,OAO/BN,ENVuC,CACzC3B,KAAM,uBACNC,QMQ8B+B,EAAST,OAPN,gDAS/BI,ENPoC,CACtC3B,KAAM,wBMH2B,4DDwTjCkH,YAAa,WACXvF,EAASS,MAEXiC,SAAU,WACR1C,EAASD,MAEX6E,cAAe,SAAAhF,GACbI,ECnT4B,SAACJ,GAAD,OAAU,SAAOI,GAAP,eAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAGfE,EAAIb,SAASwE,KAAKlE,IAHH,UAId,OADlBS,EAHgC,QAIzB5C,OAJyB,sBAK9B,IAAI6C,MAAM,oBALoB,OAOtCN,EAASH,EAAoBQ,IAPS,gDAStCL,ENXqC,CACvC3B,KAAM,yBMCkC,yDDmT7BuH,CAAiBhG,KAE5BkF,cAAe,SAAClF,EAAMJ,GACpBQ,EC1S2B,SAACJ,EAAKJ,GAAN,OAAa,SAAOQ,GAAP,eAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAGjBE,EAAIV,WAAWD,GAAIgB,IAAIZ,IAHN,UAKhB,OAFlBS,EAHkC,QAK3B5C,OAL2B,sBAMhC,IAAI6C,MAAM,oBANsB,OAQxCN,EAASH,EAAoBQ,IARW,gDAUxCL,ENxBqC,CACvC3B,KAAM,yBMaoC,yDD0S/BwH,CAAgBjG,EAAMJ,KAEjCqF,cAAe,SAAArF,GACbQ,EC/R8B,SAACR,GAAD,OAAQ,SAAOQ,GAAP,eAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAGfE,EAAIV,WAAWD,GAAIwE,UAHJ,UAKd,OAFlB3D,EAHgC,QAKzB5C,OALyB,sBAM9B,IAAI6C,MAAM,oBANoB,OAQtCN,EAASH,EAAoBQ,IARS,gDAWtCL,ENvCqC,CACvC3B,KAAM,yBM2BkC,yDD+R7ByH,CAAmBtG,KAE9BsC,WAAY,SAAClC,EAAMJ,GACjBQ,EAASO,EAAaX,EAAMJ,QAKnBqE,CAA6CK,GEvUtD6B,G,kBACJ,WAAYpF,GAAQ,IAAD,8BACjB,4CAAMA,KAaRC,gBAAkB,WAChB,MACmC,KAAjC,EAAKzC,MAAM0C,OAAOsD,YACa,KAA/B,EAAKhG,MAAM0C,OAAOuD,UACe,KAAjC,EAAKjG,MAAM0C,OAAOmF,YACgB,KAAlC,EAAK7H,MAAM0C,OAAOoF,aAElB,EAAK/E,SAAS,CACZC,SAAS,KAEJ,IAEP,EAAKD,SAAS,CACZC,SAAS,KAEJ,IA7BQ,EAgCnBC,WAAa,WACX,EAAKF,SAAS,CACZL,OAAO,eACF,EAAK1C,MAAM0C,OADV,CAEJsD,WAAY,GACZC,SAAU,GACV4B,WAAY,GACZC,YAAa,QAvCA,EAsDnBjE,OAAS,SAAAC,GACP,EAAKf,SAAS,CACZL,OAAO,eACF,EAAK1C,MAAM0C,OADV,eAEHoB,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,WA1Db,EA8DnBf,OAAS,SAAAC,GACP,EAAKJ,SAAS,CACZK,UAAU,EACVC,GAAIF,EAAK9B,GACTqB,OAAO,eACF,EAAK1C,MAAM0C,OADV,CAEJsD,WAAY7C,EAAK6C,WACjBC,SAAU9C,EAAK8C,SACf4B,WAAY1E,EAAK0E,WACjBC,YAAa3E,EAAK2E,iBAvEL,EA2EnBxE,SAAW,SAAAH,GACT,EAAKX,MAAMuF,eAAe5E,EAAK9B,KA5Ed,EA8EnBmC,SAAW,WACL,EAAKf,mBACP,EAAKD,MAAMwF,eAAe,EAAKhI,MAAM0C,SAhFtB,EAmFnBgB,SAAW,WACL,EAAKjB,mBACP,EAAKD,MAAMyF,eAAe,EAAKjI,MAAM0C,OAAQ,EAAK1C,MAAMqD,IACxDO,YAAW,WACL,EAAKpB,MAAMhD,SAASK,oBACtB,EAAKoD,aAEL,EAAKF,SAAS,CACZK,UAAU,KAGZ,EAAKL,SAAS,CACZK,UAAU,MAGb,MAEH,EAAKL,SAAS,CACZK,UAAU,KAnGd,EAAKpD,MAAQ,CACXgD,SAAS,EACTI,UAAU,EACVC,GAAI,GACJX,OAAQ,CACNsD,WAAY,GACZC,SAAU,GACV4B,WAAY,GACZC,YAAa,KAVA,E,iFA6CjBzD,KAAK7B,MAAM4E,gB,yCAGM5C,GAEbH,KAAK7B,MAAMhD,SAASM,eAAiB0E,EAAUhF,SAASM,cAC1DuE,KAAK7B,MAAM4E,gB,+BAsDL,IAAD,OACP,OACE,yBAAKzC,UAAU,YACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,cAAf,iBAEE,yBAAKA,UAAU,OAAf,cAEE,2BACEX,KAAK,aACLY,SAAUP,KAAKR,OACfc,UACEN,KAAKrE,MAAMgD,SAAWqB,KAAK7B,MAAMhD,SAASK,mBACtCwE,KAAKrE,MAAMoD,SACT,cACA,GACF,YAENa,MAAOI,KAAKrE,MAAM0C,OAAOsD,cAG7B,yBAAKrB,UAAU,OAAf,YAEE,2BACEX,KAAK,WACLY,SAAUP,KAAKR,OACfc,UACEN,KAAKrE,MAAMgD,SAAWqB,KAAK7B,MAAMhD,SAASK,mBACtCwE,KAAKrE,MAAMoD,SACT,cACA,GACF,YAENa,MAAOI,KAAKrE,MAAM0C,OAAOuD,YAG7B,yBAAKtB,UAAU,OAAf,cAEE,2BACEX,KAAK,aACLY,SAAUP,KAAKR,OACfc,UACEN,KAAKrE,MAAMgD,SAAWqB,KAAK7B,MAAMhD,SAASK,mBACtCwE,KAAKrE,MAAMoD,SACT,cACA,GACF,YAENa,MAAOI,KAAKrE,MAAM0C,OAAOmF,cAG7B,yBAAKlD,UAAU,OAAf,OAEE,2BACEzE,KAAK,OACL8D,KAAK,cACLY,SAAUP,KAAKR,OACfc,UACEN,KAAKrE,MAAMgD,SAAWqB,KAAK7B,MAAMhD,SAASK,mBACtCwE,KAAKrE,MAAMoD,SACT,cACA,GACF,YAENa,MAAOI,KAAKrE,MAAM0C,OAAOoF,eAG5BzD,KAAKrE,MAAMoD,SACV,4BAAQ4B,QAASX,KAAKX,UAAtB,UAEA,4BAAQsB,QAASX,KAAKb,UAAtB,aAKR,yBAAKmB,UAAU,qBACb,+BACE,2BAAOA,UAAU,UACf,wBAAIA,UAAU,OACZ,mCACA,2CACA,yCACA,oCACA,2CACA,oCACA,wCAGJ,2BAAOA,UAAU,UACdN,KAAK7B,MAAMhD,SAASA,SAASyF,KAAI,SAACnB,EAAGoB,GACpC,IAAMC,EAAI,IAAIhB,KAAKA,KAAKiB,MAAMtB,EAAEgE,cAChC,OACE,wBAAIzC,IAAKvB,EAAEzC,GAAIsD,UAAU,OACvB,4BAAKO,EAAM,GACX,4BAAKpB,EAAEkC,YACP,4BAAKlC,EAAEmC,UACP,sCAAQd,EAAEG,UAAV,YAAuBH,EAAEI,WAAa,EAAtC,YAA2CJ,EAAEK,gBAC7C,4BAAK1B,EAAE+D,YACP,wBAAIlD,UAAU,OAAOK,QAAS,kBAAM,EAAK9B,OAAOY,MAChD,wBACEa,UACE,EAAK3E,MAAMoD,SAAW,iBAAmB,SAE3C4B,QACG,EAAKhF,MAAMoD,SAAoC,aAAzB,kBAAM,EAAKE,SAASQ,kB,GAnN5C0D,cAyPR9B,eAxBS,SAAA1F,GAEtB,MAAO,CACLR,SAFmBQ,EAAbR,aAMiB,SAAAqC,GACzB,MAAO,CACLuF,YAAa,WACXvF,EAASS,MAEX0F,eAAgB,SAAAvG,GACdI,EJvO6B,SAACJ,GAAD,OAAU,SAAOI,GAAP,eAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAGhBE,EAAIxC,SAASmG,KAAKlE,IAHF,UAIf,OADlBS,EAHiC,QAI1B5C,OAJ0B,sBAK/B,IAAI6C,MAAM,oBALqB,OAOvCN,EAASF,EAAqBO,IAPS,gDASvCL,EFXsC,CACxC3B,KAAM,0BECmC,yDIuO9BgI,CAAkBzG,KAE7BwG,eAAgB,SAACxG,EAAMJ,GACrBQ,EJ9N4B,SAACJ,EAAKJ,GAAN,OAAa,SAAOQ,GAAP,eAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAGlBE,EAAIT,YAAYF,GAAIgB,IAAIZ,IAHN,UAIjB,OADlBS,EAHmC,QAI5B5C,OAJ4B,sBAKjC,IAAI6C,MAAM,oBALuB,OAOzCN,EAASF,EAAqBO,IAPW,gDASzCL,EFvBsC,CACxC3B,KAAM,0BEaqC,yDI8NhCiI,CAAiB1G,EAAMJ,KAElC0G,eAAgB,SAAA1G,GACdQ,EJpN+B,SAACR,GAAD,OAAQ,SAAOQ,GAAP,eAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAGhBE,EAAIT,YAAYF,GAAIwE,UAHJ,UAKf,OAFlB3D,EAHiC,QAK1B5C,OAL0B,sBAM/B,IAAI6C,MAAM,oBANqB,OAQvCN,EAASF,EAAqBO,IARS,gDAWvCL,EFtCsC,CACxC3B,KAAM,0BE0BmC,yDIoN9BkI,CAAoB/G,QAKpBqE,CAA6CkC,GCzP5CS,EANA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACZ,6BACG,kDAAuB,8BAAOA,EAASC,a,gBC0C/BC,E,iLA/BP,OACE,kBAAC,IAAD,KAEJ,kBAAC,WAAD,KACE,yBAAK7D,UAAU,cACb,wBAAIA,UAAU,SACZ,wBAAIA,UAAU,QACZ,kBAAC,IAAD,CAAM8D,GAAG,KAAT,UAEF,wBAAI9D,UAAU,QACZ,kBAAC,IAAD,CAAM8D,GAAG,YAAT,YAEF,wBAAI9D,UAAU,QACZ,kBAAC,IAAD,CAAM8D,GAAG,aAAT,eAKN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAarG,IACnC,kBAAC,IAAD,CAAOmG,KAAK,YAAYE,UAAWhB,IACnC,kBAAC,IAAD,CAAOc,KAAK,WAAWE,UAAW7C,IAClC,kBAAC,IAAD,CAAO6C,UAAWP,W,GAzBH5C,iB,MCDVoD,MARf,WACG,OACA,kBAAC,WAAD,KACE,yBAAKlE,UAAU,WAEf,kBAAC,EAAD,QCDLmE,IAASC,OACT,kBAAC,IAAD,CAAUzI,MAAOA,GACjB,kBAAC,EAAD,OACcgH,SAASC,eAAe,W","file":"static/js/main.a5e61f77.chunk.js","sourcesContent":["const initialState = {\r\n    gettingStatus : false,\r\n    getRoomsStatus: false,\r\n    postRoomStatus:true,\r\n    postRoom: \"\",\r\n    rooms: [],\r\n    status        : {\r\n      rooms: 0,\r\n      booking: 0,\r\n      visitors: 0\r\n    }\r\n  };\r\n  \r\n  export default function roomsReducer(state = initialState, action) {\r\n    switch(action.type) {\r\n      \r\n      case 'GET_STATUS_REQUEST': \r\n        return {\r\n          ...state,\r\n          gettingStatus: true,\r\n        }\r\n      case 'GET_STATUS_SUCCSESS': \r\n      return {\r\n        ...state,\r\n        gettingStatus: false,\r\n        status: action.payload\r\n      }\r\n      case 'GET_STATUS_FAILURE': \r\n      return {\r\n        ...state,\r\n        gettingStatus: false,\r\n      }\r\n      case 'GET_ROOMS_SUCCSESS':\r\n      return {\r\n        ...state,\r\n        getRoomsStatus: true,\r\n        rooms: action.payload\r\n      }\r\n      case 'GET_ROOMS_FAILURE':\r\n      return {\r\n        ...state,\r\n        getRoomsStatus: false,\r\n      }\r\n      case 'POST_ROOM_SUCCSESS':\r\n      return {\r\n        ...state,\r\n        postRoomStatus: true,\r\n        postRoom: action.payload\r\n      }\r\n      case 'POST_ROOM_FAILURE':\r\n      return {\r\n        ...state,\r\n        postRoomStatus: false,\r\n      }\r\n      default:\r\n        return state;\r\n    }\r\n  }","const initialState = {\r\n    getBookingStatus: false,\r\n    postBookingStatus: true,\r\n    postBooking: \"\",\r\n    booking: []\r\n  };\r\n  \r\n  export default function bookingReducer(state = initialState, action) {\r\n    switch(action.type) {\r\n      case 'GET_BOOKING_SUCCSESS':\r\n      return {\r\n        ...state,\r\n        getBookingStatus: true,\r\n        booking: action.payload\r\n      }\r\n      case 'GET_BOOKING_FAILURE':\r\n      return {\r\n        ...state,\r\n        getBookingStatus: false,\r\n      }\r\n      case 'POST_BOOKING_SUCCSESS':\r\n      return {\r\n        ...state,\r\n        postBookingStatus: true,\r\n        postBooking: action.payload\r\n      }\r\n      case 'POST_BOOKING_FAILURE':\r\n      return {\r\n        ...state,\r\n        postBookingStatus: false\r\n      }\r\n      default:\r\n        return state;\r\n    }\r\n  }","const initialState = {\r\n    getVisitorsStatus: false,\r\n    postVisitorsStatus: true,\r\n    postVisitors: \"\",\r\n    visitors: []\r\n  };\r\n  \r\n  export default function visitorsReducer(state = initialState, action) {\r\n    switch(action.type) {\r\n      case 'GET_VISITORS_SUCCSESS':\r\n      return {\r\n        ...state,\r\n        getVisitorsStatus: true,\r\n        visitors: action.payload\r\n      }\r\n      case 'GET_VISITORS_FAILURE':\r\n      return {\r\n        ...state,\r\n        getVisitorsStatus: false,\r\n      }\r\n      case 'POST_VISITORS_SUCCSESS':\r\n        return {\r\n          ...state,\r\n          postVisitorsStatus: true,\r\n          postVisitors: action.payload\r\n        }\r\n        case 'POST_VISITORS_FAILURE':\r\n        return {\r\n          ...state,\r\n          postVisitorsStatus: false\r\n        }\r\n        default:\r\n        return state;\r\n    }\r\n  }","import {combineReducers} from 'redux'\r\nimport roomsReducer from './rooms.reducer'\r\nimport bookingReducer from './booking.reducer'\r\nimport visitorsReducer from './visitors.reducer'\r\n\r\n\r\nexport default combineReducers({\r\n    rooms: roomsReducer,\r\n    booking: bookingReducer,\r\n    visitors: visitorsReducer\r\n})","import { createStore, applyMiddleware, compose } from 'redux'; // to create the store and middleware\r\nimport rootReducer from '../reducers'\r\nimport thunk from 'redux-thunk';\r\n\r\nconst middleware = [thunk]; \r\n\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  compose(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;","import axios from \"axios\";\r\nimport EndpointFactory from \"axios-endpoints\";\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: \"https://it-blog-posts.herokuapp.com/api/\",\r\n  responseType: \"json\"\r\n});\r\n\r\nconst Endpoint = EndpointFactory(axiosInstance);\r\n\r\nexport default {\r\n  rooms       : new Endpoint(\"rooms\"),\r\n  roomsStatus : new Endpoint(\"rooms/status\"),\r\n  bookings    : new Endpoint(\"roomBookings\"),\r\n  visitors    : new Endpoint(\"visitors\"),\r\n  putRoom     :(id)=> new Endpoint(\"rooms/\"+ id),\r\n  putBooking     :(id)=> new Endpoint(\"roomBookings/\" + id),\r\n  putVisitors  :(id)=> new Endpoint(\"visitors/\" + id)\r\n}","export const getStatusRequest = () => ({\r\n  type: 'GET_STATUS_REQUEST'\r\n})\r\n\r\nexport const getStatusSuccsess = (data) => ({\r\n  type: 'GET_STATUS_SUCCSESS',\r\n  payload: data\r\n})\r\n\r\nexport const getStatusFailure = () => ({\r\n  type: 'GET_STATUS_FAILURE'\r\n})\r\n\r\nexport const getRoomsSuccsess = (data) => ({\r\n  type: 'GET_ROOMS_SUCCSESS',\r\n  payload: data\r\n})\r\n\r\nexport const getRoomsFailure = () => ({\r\n  type: 'GET_ROOMS_FAILURE'\r\n})\r\n\r\nexport const postRoomSuccsess = (data) => ({\r\n  type: 'POST_ROOM_SUCCSESS',\r\n  payload: data\r\n})\r\n\r\nexport const postRoomFailure = () => ({\r\n  type: 'POST_ROOM_FAILURE'\r\n})","export const getBookingSuccsess = (data) => ({\r\n    type: 'GET_BOOKING_SUCCSESS',\r\n    payload: data\r\n  })\r\n  \r\n  export const getBookingFailure = () => ({\r\n    type: 'GET_BOOKING_FAILURE'\r\n  })\r\n  export const postBookingSuccsess = (data) => ({\r\n    type: 'POST_BOOKING_SUCCSESS',\r\n    payload: data\r\n  })\r\n  \r\n  export const postBookingFailure = () => ({\r\n    type: 'POST_BOOKING_FAILURE'\r\n  })","export const getVisitorsSuccsess = (data) => ({\r\n    type: 'GET_VISITORS_SUCCSESS',\r\n    payload: data\r\n  })\r\n  \r\n  export const getVisitorsFailure = () => ({\r\n    type: 'GET_VISITORS_FAILURE'\r\n  })\r\n\r\n  export const postVisitorsSuccsess = (data) => ({\r\n    type: 'POST_VISITORS_SUCCSESS',\r\n    payload: data\r\n  })\r\n  \r\n  export const postVisitorsFailure = () => ({\r\n    type: 'POST_VISITORS_FAILURE'\r\n  })","import api from '../API';\r\nimport { getStatusRequest, getStatusSuccsess, getStatusFailure,getRoomsSuccsess,getRoomsFailure,postRoomFailure,postRoomSuccsess } from '../actions';\r\n\r\nexport const getStatusThunk = () => async (dispatch) => {\r\n  try {\r\n    dispatch(getStatusRequest());\r\n    const response = await api.roomsStatus.get();\r\n    if (response.status !== 200) {\r\n      throw new Error('Cannot get status')\r\n    }\r\n    dispatch(getStatusSuccsess(response.data.status));\r\n  } catch (error) {\r\n    dispatch(getStatusFailure());\r\n  }\r\n}\r\n\r\nexport const getRoomsThunk = () => async (dispatch) => {\r\n  try {\r\n    \r\n    const response = await api.rooms.get();\r\n    if (response.status !== 200) {\r\n      throw new Error('Cannot get rooms')\r\n    }\r\n    dispatch(getRoomsSuccsess(response.data));\r\n  } catch (error) {\r\n    dispatch(getRoomsFailure());\r\n  }\r\n}\r\n\r\nexport const postRoomThunk = (data) => async (dispatch) => {\r\n  try {\r\n    \r\n    const response = await api.rooms.post(data);\r\n    if (response.status !== 200) {\r\n      throw new Error('Cannot post room')\r\n    }\r\n    dispatch(postRoomSuccsess(response));\r\n  } catch (error) {\r\n    dispatch(postRoomFailure());\r\n  }\r\n}\r\nexport const putRoomThunk = (data,id) => async (dispatch) => {\r\n  try {\r\n  \r\n    const response = await api.putRoom(id).put(data);\r\n    \r\n    if (response.status !== 200) {\r\n      throw new Error('Cannot post room')\r\n    }\r\n    dispatch(postRoomSuccsess(response));\r\n  } catch (error) {\r\n    dispatch(postRoomFailure());\r\n  }\r\n}\r\n\r\nexport const deleteRoomThunk = (id) => async (dispatch) => {\r\n  try {\r\n  \r\n    const response = await api.putRoom(id).delete();\r\n    \r\n    if (response.status !== 200) {\r\n      throw new Error('Cannot post room')\r\n    }\r\n    dispatch(postRoomSuccsess(response));\r\n  \r\n  } catch (error) {\r\n    dispatch(postRoomFailure());\r\n  }\r\n}","import api from '../API';\r\nimport { getVisitorsSuccsess,getVisitorsFailure,postVisitorsSuccsess,postVisitorsFailure } from '../actions';\r\n\r\nexport const getVisitorsThunk = () => async (dispatch) => {\r\n    try {\r\n      \r\n      const response = await api.visitors.get();\r\n      if (response.status !== 200) {\r\n        throw new Error('Cannot get rooms')\r\n      }\r\n      dispatch(getVisitorsSuccsess(response.data));\r\n    } catch (error) {\r\n      dispatch(getVisitorsFailure());\r\n    }\r\n  }\r\n\r\n  export const postVisitorsThunk = (data) => async (dispatch) => {\r\n    try {\r\n      \r\n      const response = await api.visitors.post(data);\r\n      if (response.status !== 200) {\r\n        throw new Error('Cannot post room')\r\n      }\r\n      dispatch(postVisitorsSuccsess(response));\r\n    } catch (error) {\r\n      dispatch(postVisitorsFailure());\r\n    }\r\n  }\r\n  export const putVisitorsThunk = (data,id) => async (dispatch) => {\r\n    try {\r\n      \r\n      const response = await api.putVisitors(id).put(data);\r\n      if (response.status !== 200) {\r\n        throw new Error('Cannot post room')\r\n      }\r\n      dispatch(postVisitorsSuccsess(response));\r\n    } catch (error) {\r\n      dispatch(postVisitorsFailure());\r\n    }\r\n  }\r\n  \r\n  export const deleteVisitorsThunk = (id) => async (dispatch) => {\r\n    try {\r\n    \r\n      const response = await api.putVisitors(id).delete();\r\n      \r\n      if (response.status !== 200) {\r\n        throw new Error('Cannot post room')\r\n      }\r\n      dispatch(postVisitorsSuccsess(response));\r\n    \r\n    } catch (error) {\r\n      dispatch(postVisitorsFailure());\r\n    }\r\n  }","import React, { PureComponent } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getStatusThunk,\r\n  getRoomsThunk,\r\n  postRoomThunk,\r\n  putRoomThunk,\r\n  deleteRoomThunk\r\n} from \"../../thunks\";\r\nimport \"./rooms.style.scss\";\r\nclass Rooms extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      checked: true,\r\n      updating: false,\r\n      ID: \"\",\r\n      poster: {\r\n        bookedAt: new Date(),\r\n        floor: \"\",\r\n        beds: \"\",\r\n        balcony: \"\",\r\n        roomId: \"\",\r\n        available: false\r\n      }\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.props.getStatus();\r\n    this.props.getRooms();\r\n  }\r\n  componentDidUpdate(PrevProps) {\r\n    if(this.props.rooms.postRoom !== PrevProps.rooms.postRoom){\r\n    console.log(\"DID_UPDATE\",this.props)\r\n    this.props.getRooms();\r\n    this.props.getStatus();\r\n    }\r\n  }\r\n\r\n  checkEmtyInputs = () => {\r\n    if (\r\n      this.state.poster.floor !== \"\" &&\r\n      this.state.poster.beds !== \"\" &&\r\n      this.state.poster.balcony !== \"\" &&\r\n      this.state.poster.roomId !== \"\"\r\n    ){\r\n      this.setState({\r\n       checked: true\r\n      })\r\n      return true;\r\n    }\r\n    else {\r\n      this.setState({\r\n        checked: false\r\n       })\r\n      return false;\r\n    }\r\n  };\r\n  emtyInputs = () => {\r\n    this.setState({\r\n      poster: {\r\n        ...this.state.poster,\r\n        floor: \"\",\r\n        beds: \"\",\r\n        balcony: \"\",\r\n        roomId: \"\"\r\n      }\r\n    });\r\n  };\r\n  onEdit = elem => {\r\n    this.setState({\r\n      updating: true,\r\n      ID: elem.id,\r\n      poster: {\r\n        ...this.state.poster,\r\n        floor: elem.floor,\r\n        beds: elem.beds,\r\n        balcony: elem.balcony,\r\n        roomId: elem.roomId\r\n      }\r\n    });\r\n  };\r\n  onDelete = elem => {\r\n    this.props.deleteRoom(elem.id);\r\n    \r\n  };\r\n  onCreate = () => {\r\n    if (this.checkEmtyInputs()) {\r\n      this.props.createRoom(this.state.poster);\r\n    }\r\n  }\r\n  onUpdate = () => {\r\n    if (this.checkEmtyInputs()) {\r\n    this.props.updateRoom(this.state.poster, this.state.ID)\r\n        setTimeout(()=>{\r\n\r\n         if(this.props.rooms.postRoomStatus){\r\n          this.emtyInputs();\r\n      \r\n        this.setState({\r\n          updating: false\r\n        });\r\n       \r\n      } else{\r\n        this.setState({\r\n          updating: true\r\n        })\r\n      }\r\n    },1000)\r\n  }\r\n    else{\r\n      this.setState({\r\n        updating: true\r\n      });\r\n    }\r\n   \r\n  };\r\n  getInp = e => {\r\n    this.setState({\r\n      poster: {\r\n        ...this.state.poster,\r\n        [e.target.name]: e.target.value\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Rooms\">\r\n        <div className=\"RoomsLeftSide\">\r\n          <div className=\"amountAll\">\r\n            <div className=\"amount\">\r\n              {this.props.rooms.status.rooms\r\n                ? this.props.rooms.status.rooms\r\n                : \"-\"}\r\n              <div className=\"amountText\">Rooms</div>\r\n            </div>\r\n            <div className=\"amount\">\r\n              {this.props.rooms.status.booking\r\n                ? this.props.rooms.status.booking\r\n                : \"-\"}\r\n              <div className=\"amountText\">Booking</div>\r\n            </div>\r\n            <div className=\"amount\">\r\n              {this.props.rooms.status.visitors\r\n                ? this.props.rooms.status.visitors\r\n                : \"-\"}\r\n              <div className=\"amountText\">Visitors</div>\r\n            </div>\r\n          </div>\r\n          <div className=\"roomsInput\">\r\n            <div className=\"inpSection\">\r\n              Add New Room\r\n              <div className=\"inp\">\r\n                Floor\r\n                <input\r\n                  name=\"floor\"\r\n                  onChange={this.getInp}\r\n                  className={this.state.checked && this.props.rooms.postRoomStatus  ? (this.state.updating? \"greenborder\": \"\") : \"redborder\"}\r\n                  value={this.state.poster.floor}\r\n                ></input>\r\n              </div>\r\n              <div className=\"inp\">\r\n                Beds\r\n                <input\r\n                  name=\"beds\"\r\n                  onChange={this.getInp}\r\n                  className={this.state.checked &&this.props.rooms.postRoomStatus ? (this.state.updating? \"greenborder\": \"\") : \"redborder\"}\r\n                  value={this.state.poster.beds}\r\n                ></input>\r\n              </div>\r\n              <div className=\"inp\">\r\n                Balcony\r\n                <select\r\n                  name=\"balcony\"\r\n\r\n                  onChange={this.getInp}\r\n                  className={this.state.checked &&this.props.rooms.postRoomStatus ? (this.state.updating? \"greenborder\": \"\") : \"redborder\"}\r\n                  value={this.state.poster.balcony}\r\n                > \r\n                <option value=\"\" defaultValue disabled hidden>Choose</option>\r\n                  <option value={true}>Yes</option>\r\n                  <option value={false}>No</option>\r\n                </select>\r\n              </div>\r\n              <div className=\"inp\">\r\n                Room Number\r\n                <input\r\n                  name=\"roomId\"\r\n                  onChange={this.getInp}\r\n                  className={this.state.checked &&this.props.rooms.postRoomStatus ? (this.state.updating? \"greenborder\": \"\") : \"redborder\"}\r\n                  value={this.state.poster.roomId}\r\n                ></input>\r\n              </div>\r\n              {this.state.updating ? (\r\n                <button onClick={this.onUpdate}>Update</button>\r\n              ) : (\r\n                <button onClick={this.onCreate}>Create</button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"RoomsRigthSide\">\r\n          <table>\r\n            <thead className=\"theadT\">\r\n              <tr className=\"trH\">\r\n                <th>#ID</th>\r\n                <th>Booked At</th>\r\n                <th>Floor</th>\r\n                <th>Beds</th>\r\n                <th>Balcony</th>\r\n                <th>Number</th>\r\n                <th>Edit</th>\r\n                <th>Delete</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"tbodyT\">\r\n              {this.props.rooms.rooms.map((e, ind) => {\r\n                const d = new Date(Date.parse(e.bookedAt));\r\n                return (\r\n                  <tr key={e.id} className=\"trT\">\r\n                    <th>{ind + 1}</th>\r\n                    <th>{`${d.getDate()}/${d.getMonth()+1}/${d.getFullYear()}`}</th>\r\n                    <th className={e.floor > 0 ? \"\" : \"thRed\"}>{e.floor}</th>\r\n                    <th className={e.beds > 0 ? \"\" : \"thRed\"}>{e.beds}</th>\r\n                    <th className={e.balcony ? \"thGreen\" : \"thRed\"}>\r\n                      {e.balcony ? \"Yes\" : \"No\"}{\" \"}\r\n                    </th>\r\n                    <th className={e.roomId > 0 ? \"\" : \"thRed\"}>{e.roomId}</th>\r\n                    <th className=\"Edit\" onClick={() => this.onEdit(e)}></th>\r\n                    <th\r\n                      className={this.state.updating? \"DeleteDisabled\" : \"Delete\"}\r\n                      onClick={!this.state.updating ? () => this.onDelete(e) : ()=>{}}\r\n                    ></th>\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  const { rooms } = state;\r\n  return {\r\n    rooms\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getStatus: () => {\r\n      dispatch(getStatusThunk());\r\n    },\r\n    getRooms: () => {\r\n      dispatch(getRoomsThunk());\r\n    },\r\n    createRoom: data => {\r\n      dispatch(postRoomThunk(data));\r\n    },\r\n    updateRoom: (data, id) => {\r\n      dispatch(putRoomThunk(data, id));\r\n    },\r\n    deleteRoom: id => {\r\n      dispatch(deleteRoomThunk(id));\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Rooms);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getBookingThunk,\r\n  getVisitorsThunk,\r\n  getRoomsThunk,\r\n  postBookingThunk,\r\n  putBookingThunk,\r\n  deleteBookingThunk,\r\n  putRoomThunk\r\n} from \"../../thunks\";\r\nimport \"./booking.style.scss\";\r\nclass Booking extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      checked: true,\r\n      updating: false,\r\n      ID: \"\",\r\n      poster: {\r\n        personName: \"\",\r\n        roomNumber: \"\",\r\n        roomId: \"\",\r\n        personId: \"\",\r\n        bookedAt: \"\"\r\n      }\r\n    };\r\n  }\r\n  checkEmtyInputs = () => {\r\n    if (\r\n      this.state.poster.personName !== \"\" &&\r\n      this.state.poster.personId !== \"\" &&\r\n      this.state.poster.roomNumber !== \"\" &&\r\n      this.state.poster.bookedAt !== \"\"\r\n    ) {\r\n      this.setState({\r\n        checked: true\r\n      });\r\n      return true;\r\n    } else {\r\n      this.setState({\r\n        checked: false\r\n      });\r\n      return false;\r\n    }\r\n  };\r\n  emtyInputs = () => {\r\n    this.setState({\r\n      poster: {\r\n        ...this.state.poster,\r\n        personName: \"\",\r\n        roomNumber: \"\",\r\n        roomId: \"\",\r\n        personId: \"\",\r\n        bookedAt: \"\"\r\n      }\r\n    });\r\n  };\r\n  componentDidMount() {\r\n    this.props.getBooking();\r\n    this.props.getVisitors();\r\n    this.props.getRooms();\r\n    //console.log('PROPS:', this.props, '----->STATE',this.state)\r\n  }\r\n\r\n  componentDidUpdate(PrevProps) {\r\n    if (this.props.booking.postBooking !== PrevProps.booking.postBooking) {\r\n      console.log(\"DID_UPDATE\", this.props);\r\n      this.props.getBooking();\r\n      this.props.getVisitors();\r\n      this.props.getRooms();\r\n    }\r\n  }\r\n  getInp = e => {\r\n    this.setState({\r\n      poster: {\r\n        ...this.state.poster,\r\n        [e.target.name]: e.target.value\r\n      }\r\n    });\r\n  };\r\n  updateRoomBookingDate = id => {\r\n    let roomPoster = {};\r\n    this.props.rooms.rooms.filter(e => {\r\n      if (e.id === id) {\r\n        roomPoster = e;\r\n        roomPoster.bookedAt = this.state.poster.bookedAt;\r\n        return true;\r\n      }\r\n    });\r\n    this.props.updateRoom(roomPoster, id);\r\n  };\r\n  chPersonID = e => {\r\n    const value = e.target.value.split(\",\");\r\n    this.setState({\r\n      poster: {\r\n        ...this.state.poster,\r\n        personName: value[0],\r\n        personId: value[1]\r\n      }\r\n    });\r\n  };\r\n  chRoomID = e => {\r\n    const value = e.target.value.split(\",\");\r\n    this.setState({\r\n      poster: {\r\n        ...this.state.poster,\r\n        roomNumber: value[0],\r\n        roomId: value[1]\r\n      }\r\n    });\r\n  };\r\n  onCreate = () => {\r\n    if (this.checkEmtyInputs()) {\r\n      this.props.createBooking(this.state.poster);\r\n      this.updateRoomBookingDate(this.state.poster.roomId);\r\n    }\r\n  };\r\n  onDelete = elem => {\r\n    this.props.deleteBooking(elem.id);\r\n  };\r\n  onUpdate = () => {\r\n    if (this.checkEmtyInputs()) {\r\n      this.props.updateBooking(this.state.poster, this.state.ID);\r\n      this.updateRoomBookingDate(this.state.poster.roomId);\r\n      if (this.props.rooms.postRoomStatus) {\r\n        this.setState({\r\n          updating: false\r\n        });\r\n      } else {\r\n        this.setState({\r\n          updating: true\r\n        });\r\n      }\r\n    } else {\r\n      this.setState({\r\n        updating: true\r\n      });\r\n    }\r\n  };\r\n  onEdit = (elem, person, room) => {\r\n    this.setState({\r\n      updating: true,\r\n      ID: elem.id,\r\n      poster: {\r\n        ...this.state.poster,\r\n        personName: elem.personName,\r\n        roomId: elem.roomId,\r\n        roomNumber: elem.roomNumber,\r\n        personId: elem.personId,\r\n        bookedAt: elem.bookedAt\r\n      }\r\n    });\r\n    //----------------------------------------------------------\r\n    for(let i=1;i<person.options.length;i++){\r\n      if(person.options[i].text === elem.personName){\r\n      person.options.selectedIndex = i\r\n      }\r\n    }\r\n    for(let i=1;i<room.options.length;i++){\r\n      if(room.options[i].text === `${elem.roomNumber}`){\r\n        room.options.selectedIndex = i\r\n      }\r\n    }\r\n    //----------------------------------------------------------\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"Booking\">\r\n        <div className=\"BookingLeftSide\">\r\n          <div className=\"bookingInput\">\r\n            <div className=\"inpSection\">\r\n              New Booking\r\n              <div className=\"inp\">\r\n                Person Name\r\n                <select id = \"person\"\r\n                  name=\"personName\"\r\n                  onChange={this.chPersonID}\r\n                  className={\r\n                    this.state.checked && this.props.booking.postBookingStatus\r\n                      ? this.state.updating\r\n                        ? \"greenborder\"\r\n                        : \"\"\r\n                      : \"redborder\"\r\n                  }\r\n                >\r\n                  <option value=\"\" hidden>\r\n                    Choose\r\n                  </option>\r\n                  {this.props.visitors.visitors.map(e => (\r\n                    <option key={e.id} value={[e.personName, e.personId]} >\r\n                      {e.personName}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n              <div className=\"inp\">\r\n                Person ID\r\n                <input\r\n                  name=\"personId\"\r\n                  readOnly\r\n                  className={\r\n                    this.state.checked && this.props.booking.postBookingStatus\r\n                      ? this.state.updating\r\n                        ? \"greenborder\"\r\n                        : \"\"\r\n                      : \"redborder\"\r\n                  }\r\n                  value={this.state.poster.personId}\r\n                ></input>\r\n              </div>\r\n              <div className=\"inp\">\r\n                Room ID\r\n                <select id = \"room\"\r\n                  name=\"roomId\"\r\n                  onChange={this.chRoomID}\r\n                  className={\r\n                    this.state.checked && this.props.booking.postBookingStatus\r\n                      ? this.state.updating\r\n                        ? \"greenborder\"\r\n                        : \"\"\r\n                      : \"redborder\"\r\n                  }\r\n                >\r\n                  <option value=\"\" hidden>\r\n                    Choose\r\n                  </option>\r\n                  {this.props.rooms.rooms.map(e => (\r\n                    <option key={e.id} value={[e.roomId, e.id]}>\r\n                      {e.roomId}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n              <div className=\"inp\">\r\n                Date\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"bookedAt\"\r\n                  onChange={this.getInp}\r\n                  className={\r\n                    this.state.checked && this.props.booking.postBookingStatus\r\n                      ? this.state.updating\r\n                        ? \"greenborder\"\r\n                        : \"\"\r\n                      : \"redborder\"\r\n                  }\r\n                  value={this.state.poster.bookedAt}\r\n                ></input>\r\n              </div>\r\n              {this.state.updating ? (\r\n                <button onClick={this.onUpdate}>Update</button>\r\n              ) : (\r\n                <button onClick={this.onCreate}>Create</button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"BookingRigthSide\">\r\n          <table>\r\n            <thead className=\"theadT\">\r\n              <tr className=\"trH\">\r\n                <th>#ID</th>\r\n                <th>Person Name</th>\r\n                <th>Room ID</th>\r\n                <th>Booked At</th>\r\n                <th>Person ID</th>\r\n                <th>Edit</th>\r\n                <th>Delete</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"tbodyT\">\r\n              {this.props.booking.booking.map((e, ind) => {\r\n                const d = new Date(Date.parse(e.bookedAt));\r\n                return (\r\n                  <tr key={e.id} className=\"trT\">\r\n                    <th>{ind + 1}</th>\r\n                    <th>{e.personName}</th>\r\n                    <th>{e.roomNumber}</th>\r\n                    <th>{`${d.getDate()}/${d.getMonth() + 1}/${d.getFullYear()}`}</th>\r\n                    <th>{e.personId}</th>\r\n                    <th className=\"Edit\" onClick={() => this.onEdit(e, document.getElementById(\"person\"),document.getElementById(\"room\") )}></th>\r\n                    <th\r\n                      className={\r\n                        this.state.updating ? \"DeleteDisabled\" : \"Delete\"\r\n                      }\r\n                      onClick={\r\n                        !this.state.updating ? () => this.onDelete(e) : () => {}\r\n                      }\r\n                    ></th>\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  const { booking, rooms, visitors } = state;\r\n  return {\r\n    booking,\r\n    rooms,\r\n    visitors\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getBooking: () => {\r\n      dispatch(getBookingThunk());\r\n    },\r\n    getVisitors: () => {\r\n      dispatch(getVisitorsThunk());\r\n    },\r\n    getRooms: () => {\r\n      dispatch(getRoomsThunk());\r\n    },\r\n    createBooking: data => {\r\n      dispatch(postBookingThunk(data));\r\n    },\r\n    updateBooking: (data, id) => {\r\n      dispatch(putBookingThunk(data, id));\r\n    },\r\n    deleteBooking: id => {\r\n      dispatch(deleteBookingThunk(id));\r\n    },\r\n    updateRoom: (data, id) => {\r\n      dispatch(putRoomThunk(data, id));\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Booking);\r\n","import api from '../API';\r\nimport { getBookingSuccsess,getBookingFailure,postBookingFailure,postBookingSuccsess } from '../actions';\r\n\r\nexport const getBookingThunk = () => async (dispatch) => {\r\n    try {\r\n      \r\n      const response = await api.bookings.get();\r\n      if (response.status !== 200) {\r\n        throw new Error('Cannot get rooms')\r\n      }\r\n      dispatch(getBookingSuccsess(response.data));\r\n    } catch (error) {\r\n      dispatch(getBookingFailure());\r\n    }\r\n  }\r\n  export const postBookingThunk = (data) => async (dispatch) => {\r\n    try {\r\n      \r\n      const response = await api.bookings.post(data);\r\n      if (response.status !== 200) {\r\n        throw new Error('Cannot post room')\r\n      }\r\n      dispatch(postBookingSuccsess(response));\r\n    } catch (error) {\r\n      dispatch(postBookingFailure());\r\n    }\r\n  }\r\n  export const putBookingThunk = (data,id) => async (dispatch) => {\r\n    try {\r\n    \r\n      const response = await api.putBooking(id).put(data);\r\n      \r\n      if (response.status !== 200) {\r\n        throw new Error('Cannot post room')\r\n      }\r\n      dispatch(postBookingSuccsess(response));\r\n    } catch (error) {\r\n      dispatch(postBookingFailure());\r\n    }\r\n  }\r\n  \r\n  export const deleteBookingThunk = (id) => async (dispatch) => {\r\n    try {\r\n    \r\n      const response = await api.putBooking(id).delete();\r\n      \r\n      if (response.status !== 200) {\r\n        throw new Error('Cannot post room')\r\n      }\r\n      dispatch(postBookingSuccsess(response));\r\n    \r\n    } catch (error) {\r\n      dispatch(postBookingFailure());\r\n    }\r\n  }","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getVisitorsThunk,\r\n  postVisitorsThunk,\r\n  putVisitorsThunk,\r\n  deleteVisitorsThunk\r\n} from \"../../thunks\";\r\nimport \"./visitors.style.scss\";\r\nclass Visitors extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      checked: true,\r\n      updating: false,\r\n      ID: \"\",\r\n      poster: {\r\n        personName: \"\",\r\n        personId: \"\",\r\n        cardNumber: \"\",\r\n        createdDate: \"\"\r\n      }\r\n    };\r\n  }\r\n  checkEmtyInputs = () => {\r\n    if (\r\n      this.state.poster.personName !== \"\" &&\r\n      this.state.poster.personId !== \"\" &&\r\n      this.state.poster.cardNumber !== \"\" &&\r\n      this.state.poster.createdDate !== \"\"\r\n    ) {\r\n      this.setState({\r\n        checked: true\r\n      });\r\n      return true;\r\n    } else {\r\n      this.setState({\r\n        checked: false\r\n      });\r\n      return false;\r\n    }\r\n  };\r\n  emtyInputs = () => {\r\n    this.setState({\r\n      poster: {\r\n        ...this.state.poster,\r\n        personName: \"\",\r\n        personId: \"\",\r\n        cardNumber: \"\",\r\n        createdDate: \"\"\r\n      }\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.getVisitors();\r\n  }\r\n\r\n  componentDidUpdate(PrevProps) {\r\n    // console.log(\"DID_UPDATE\",this.props, \"STATE__>\",this.state)\r\n    if (this.props.visitors.postVisitors !== PrevProps.visitors.postVisitors) {\r\n      this.props.getVisitors();\r\n    }\r\n  }\r\n  getInp = e => {\r\n    this.setState({\r\n      poster: {\r\n        ...this.state.poster,\r\n        [e.target.name]: e.target.value\r\n      }\r\n    });\r\n  };\r\n  onEdit = elem => {\r\n    this.setState({\r\n      updating: true,\r\n      ID: elem.id,\r\n      poster: {\r\n        ...this.state.poster,\r\n        personName: elem.personName,\r\n        personId: elem.personId,\r\n        cardNumber: elem.cardNumber,\r\n        createdDate: elem.createdDate\r\n      }\r\n    });\r\n  };\r\n  onDelete = elem => {\r\n    this.props.deleteVisitors(elem.id);\r\n  };\r\n  onCreate = () => {\r\n    if (this.checkEmtyInputs()) {\r\n      this.props.createVisitors(this.state.poster);\r\n    }\r\n  };\r\n  onUpdate = () => {\r\n    if (this.checkEmtyInputs()) {\r\n      this.props.updateVisitors(this.state.poster, this.state.ID);\r\n      setTimeout(() => {\r\n        if (this.props.visitors.postVisitorsStatus) {\r\n          this.emtyInputs();\r\n\r\n          this.setState({\r\n            updating: false\r\n          });\r\n        } else {\r\n          this.setState({\r\n            updating: true\r\n          });\r\n        }\r\n      }, 1000);\r\n    } else {\r\n      this.setState({\r\n        updating: true\r\n      });\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"Visitors\">\r\n        <div className=\"VisitorsLeftSide\">\r\n          <div className=\"visitorsInput\">\r\n            <div className=\"inpSection\">\r\n              Add New Person\r\n              <div className=\"inp\">\r\n                Person Name\r\n                <input\r\n                  name=\"personName\"\r\n                  onChange={this.getInp}\r\n                  className={\r\n                    this.state.checked && this.props.visitors.postVisitorsStatus\r\n                      ? this.state.updating\r\n                        ? \"greenborder\"\r\n                        : \"\"\r\n                      : \"redborder\"\r\n                  }\r\n                  value={this.state.poster.personName}\r\n                ></input>\r\n              </div>\r\n              <div className=\"inp\">\r\n                Person ID\r\n                <input\r\n                  name=\"personId\"\r\n                  onChange={this.getInp}\r\n                  className={\r\n                    this.state.checked && this.props.visitors.postVisitorsStatus\r\n                      ? this.state.updating\r\n                        ? \"greenborder\"\r\n                        : \"\"\r\n                      : \"redborder\"\r\n                  }\r\n                  value={this.state.poster.personId}\r\n                ></input>\r\n              </div>\r\n              <div className=\"inp\">\r\n                Card Number\r\n                <input\r\n                  name=\"cardNumber\"\r\n                  onChange={this.getInp}\r\n                  className={\r\n                    this.state.checked && this.props.visitors.postVisitorsStatus\r\n                      ? this.state.updating\r\n                        ? \"greenborder\"\r\n                        : \"\"\r\n                      : \"redborder\"\r\n                  }\r\n                  value={this.state.poster.cardNumber}\r\n                ></input>\r\n              </div>\r\n              <div className=\"inp\">\r\n                Date\r\n                <input\r\n                  type=\"date\"\r\n                  name=\"createdDate\"\r\n                  onChange={this.getInp}\r\n                  className={\r\n                    this.state.checked && this.props.visitors.postVisitorsStatus\r\n                      ? this.state.updating\r\n                        ? \"greenborder\"\r\n                        : \"\"\r\n                      : \"redborder\"\r\n                  }\r\n                  value={this.state.poster.createdDate}\r\n                ></input>\r\n              </div>\r\n              {this.state.updating ? (\r\n                <button onClick={this.onUpdate}>Update</button>\r\n              ) : (\r\n                <button onClick={this.onCreate}>Create</button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"VisitorsRigthSide\">\r\n          <table>\r\n            <thead className=\"theadT\">\r\n              <tr className=\"trH\">\r\n                <th>#ID</th>\r\n                <th>Person Name</th>\r\n                <th>Person ID</th>\r\n                <th>Date</th>\r\n                <th>Card Number</th>\r\n                <th>Edit</th>\r\n                <th>Delete</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"tbodyT\">\r\n              {this.props.visitors.visitors.map((e, ind) => {\r\n                const d = new Date(Date.parse(e.createdDate));\r\n                return (\r\n                  <tr key={e.id} className=\"trT\">\r\n                    <th>{ind + 1}</th>\r\n                    <th>{e.personName}</th>\r\n                    <th>{e.personId}</th>\r\n                    <th>{`${d.getDate()}/${d.getMonth() + 1}/${d.getFullYear()}`}</th>\r\n                    <th>{e.cardNumber}</th>\r\n                    <th className=\"Edit\" onClick={() => this.onEdit(e)}></th>\r\n                    <th\r\n                      className={\r\n                        this.state.updating ? \"DeleteDisabled\" : \"Delete\"\r\n                      }\r\n                      onClick={\r\n                        !this.state.updating ? () => this.onDelete(e) : () => {}\r\n                      }\r\n                    ></th>\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  const { visitors } = state;\r\n  return {\r\n    visitors\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getVisitors: () => {\r\n      dispatch(getVisitorsThunk());\r\n    },\r\n    createVisitors: data => {\r\n      dispatch(postVisitorsThunk(data));\r\n    },\r\n    updateVisitors: (data, id) => {\r\n      dispatch(putVisitorsThunk(data, id));\r\n    },\r\n    deleteVisitors: id => {\r\n      dispatch(deleteVisitorsThunk(id));\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Visitors);\r\n","import React from 'react'\r\n\r\n\r\nconst Page404 = ({ location }) => (\r\n    <div>\r\n       <h2>No match found for <code>{location.pathname}</code></h2>\r\n    </div>\r\n );\r\n\r\n export default Page404;","import React,{ PureComponent,Fragment} from 'react'\r\nimport Rooms from '../screens/Rooms'\r\nimport Booking from '../screens/Booking'\r\nimport Visitors from '../screens/Visitors'\r\nimport Page404 from './Page404'\r\nimport {\r\n   // BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    HashRouter \r\n  } from \"react-router-dom\";\r\n\r\nclass Navigation extends PureComponent{\r\n\r\n    render(){\r\n        return (\r\n          <HashRouter>\r\n            \r\n      <Fragment>\r\n        <nav className=\"navigation\">\r\n          <ul className=\"links\">\r\n            <li className=\"link\">\r\n              <Link to=\"/\">Rooms</Link>\r\n            </li>\r\n            <li className=\"link\">\r\n              <Link to=\"/booking\">Booking</Link>\r\n            </li>\r\n            <li className=\"link\">\r\n              <Link to=\"/visitors\">Visitors</Link>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n\r\n        <Switch>\r\n          <Route path=\"/\" exact component = {Rooms}/>\r\n          <Route path=\"/visitors\" component={Visitors}/>\r\n          <Route path=\"/booking\" component={Booking}/>\r\n          <Route component={Page404} />\r\n        </Switch>\r\n        </Fragment>\r\n        \r\n        </HashRouter>);\r\n    }\r\n\r\n}\r\n\r\nexport default Navigation;","import React,{Fragment} from 'react';\nimport Navigation from './components/Navigation.jsx'\n\nimport './App.scss';\nfunction App() {\n   return(\n   <Fragment>\n     <div className=\"toptab\">\n     </div>\n     <Navigation/>\n   </Fragment>)\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport store from './store/store'\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n<Provider store={store}>\n<App />\n</Provider> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}